#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>


/*Name: Duc Anh Nguyen*/

/*Command Argument Line*/
void process_exec(char *args[100][100], int numCmds){
    /*Variables*/
    int status;
    int exit_status;
    int i = 0;
    int numPipes = numCmds - 1;
    int fd[numPipes][2];
    int pids[numCmds];
    //Exit Constant variables
    char *exit_name = "exit";

    //Parent process create necessaray pipes
    for(i = 0; i < numPipes; i++){
        if(pipe(fd[i]) < 0){
            //fork failed
            fprintf(stderr, "Fail to create a pipe between processes\n");
            exit(1);
    }

    //Execute pipeline in order
    for(i = 0; i < numCmds; i++){
	pid_t pid = fork();

	//If there is an error in forking
	if (pid < 0){
		fprintf(stderr, "Fail to create process");
		exit(1);
   	}
	else if(pid == 0){
		//Redirect Input
		if(i > 0){
			//All commands after the first command, connect input to the pipeline
			dup2(fd[i - 1][0], STDIN_FILENO);
		}
		else{
			//First command
		}


	}

    }



    // Child Process
    //for (i = 0; i <= process_num; i++) {    	

	//pids[i] = fork();

    	//if (pids[i] < 0) {
            // fork failed
            //fprintf(stderr, "Fail to create process\n");
            //exit(1);
    	//}
	//else if (pids[i] == 0) {           
	    // Close all unnecessary pipes
            //for (int j = 0; j < process_num; j++) {
            	//if (j != i && j != i - 1) {
                    //close(fd[j][0]);
                    //close(fd[j][1]);
                //}
            //}

            // Redirect input from previous pipe
            //if (i > 0) {
		//close(fd[i-1][1]);
            	//dup2(fd[i-1][0], STDIN_FILENO);
            	//close(fd[i-1][0]);
             //}

            // Redirect output to current pipe
            //if (i < process_num) {
		//close(fd[i][0]);
            	//dup2(fd[i][1], STDOUT_FILENO);
            	//close(fd[i][1]);
            //}
	    	
            // Execute process
            //if (execvp(args[i][0], args[i]) == -1) {
            	//exit(127);
            //}
    	//}
    //}

    //Parent Process close all necessary pipe
    //for (i = 0; i < process_num; i++){
        //close(fd[i][0]);
        //close(fd[i][1]);
    //}

    //Parent Process Waiting for all Child processes
    //for(i = 0; i <= process_num; i++){
	//waitpid(pids[i], &status, 0);
    //}

    //Print Error Statement
    //if(WIFEXITED(status)){
        //printf("jsh status: %d\n", WEXITSTATUS(status));
    //}
}


/*Main Function*/
int main(int argc, char const *argv[])
{

    /*Set up void variables*/
    (void)argc;
    (void)argv;
    int i, j;
    char *delim = " \t\r\n";                                        //Delimiter for strtok
    //char *pip_char = "|";

    char *tokens[100][100];
    //char *pip_token;
    char *token;
    /*Variables for prompt*/
    char *prompt = "jsh$";
    char line[100];

    /*Main Loop*/
    while (1)
    {
        /*Variables for tokens*/
        i = 0;
        j = 0;

        /*Get Input from the user*/
        printf("%s ", prompt);
        fgets(line, sizeof(line), stdin);

        if (line[0] != '\n')
        {
            /*Extracting the tokens*/
            token = strtok(line, delim);

            while (token != NULL)
            {
                tokens[i][j] = token;

                if (strcmp(tokens[i][j], "|") == 0)
                {
                    tokens[i][j] = NULL;
                    i = i + 1;
                    j = 0;
                    token = strtok(NULL, delim);
                }
                else
                {
                    j++;
                    token = strtok(NULL, delim);
                }
            }
            tokens[i][j] = NULL;
            process_exec(tokens, i);
        }

    }

    return 0;
}



